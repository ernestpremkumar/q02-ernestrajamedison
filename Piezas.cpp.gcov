        -:    0:Source:Piezas.cpp
        -:    0:Graph:./Piezas.gcno
        -:    0:Data:./Piezas.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Piezas.h"
        -:    2:#include <vector>
        -:    3:/** CLASS Piezas
        -:    4: * Class for representing a Piezas vertical board, which is roughly based
        -:    5: * on the game "Connect Four" where pieces are placed in a column and
        -:    6: * fall to the bottom of the column, or on top of other pieces already in
        -:    7: * that column. For an illustration of the board, see:
        -:    8: *  https://en.wikipedia.org/wiki/Connect_Four
        -:    9: *
        -:   10: * Board coordinates [row,col] should match with:
        -:   11: * [2,0][2,1][2,2][2,3]
        -:   12: * [1,0][1,1][1,2][1,3]
        -:   13: * [0,0][0,1][0,2][0,3]
        -:   14: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   15: * dropped in column 2 should take [1,2].
        -:   16:**/
        -:   17:
        -:   18:using namespace std;
        -:   19:
function _ZN6Piezas10toggleTurnEv called 35 returned 100% blocks executed 100%
       35:   20:void Piezas::toggleTurn()
        -:   21:{
       35:   22:  if(this->turn == X)
branch  0 taken 18 (fallthrough)
branch  1 taken 17
        -:   23:  {
       18:   24:    this->turn = O;
        -:   25:  }
       17:   26:  else if(this->turn == O)
branch  0 taken 17 (fallthrough)
branch  1 taken 0
        -:   27:  {
       17:   28:    this->turn = X;
        -:   29:  }
       35:   30:}
        -:   31:
        -:   32:
        -:   33:/**
        -:   34: * Constructor sets an empty board (default 3 rows, 4 columns) and
        -:   35: * specifies it is X's turn first
        -:   36:**/
function _ZN6PiezasC2Ev called 1 returned 100% blocks executed 84%
        1:   37:Piezas::Piezas()
call    0 returned 1
call    1 never executed
        -:   38:{
        1:   39:  board.resize(BOARD_ROWS);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 never executed
        4:   40:  for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:   41:  {
        3:   42:    board[i].resize(BOARD_COLS);
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
       15:   43:    for(int j=0; j<BOARD_COLS;j++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:   44:    {
       12:   45:      board[i][j] = Blank;
call    0 returned 12
call    1 returned 12
        -:   46:    }
        -:   47:  }
        1:   48:  this->turn = X;
        1:   49:}
        -:   50:
        -:   51:
        -:   52:/**
        -:   53: * Resets each board location to the Blank Piece value, with a board of the
        -:   54: * same size as previously specified
        -:   55:**/
function _ZN6Piezas5resetEv called 3 returned 100% blocks executed 100%
        3:   56:void Piezas::reset()
        -:   57:{
       12:   58:  for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        -:   59:  {
       45:   60:    for(int j=0; j<BOARD_COLS;j++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:   61:    {
       36:   62:      board[i][j] = Blank;
call    0 returned 36
call    1 returned 36
        -:   63:    }
        -:   64:  }
        3:   65:}
        -:   66:
        -:   67:/**
        -:   68: * Places a piece of the current turn on the board, returns what
        -:   69: * piece is placed, and toggles which Piece's turn it is. dropPiece does
        -:   70: * NOT allow to place a piece in a location where a column is full.
        -:   71: * In that case, placePiece returns Piece Blank value
        -:   72: * Out of bounds coordinates return the Piece Invalid value
        -:   73: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   74:**/
function _ZN6Piezas9dropPieceEi called 35 returned 100% blocks executed 100%
       35:   75:Piece Piezas::dropPiece(int column)
        -:   76:{
       35:   77:  if(column > 3 || column < 0)
branch  0 taken 34 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 33
        -:   78:  {
        2:   79:    toggleTurn();
call    0 returned 2
        2:   80:    return Invalid;
        -:   81:  }
       73:   82:  for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 69
branch  1 taken 4 (fallthrough)
        -:   83:  {
       69:   84:    if(board[i][column] == Blank)
call    0 returned 69
call    1 returned 69
branch  2 taken 29 (fallthrough)
branch  3 taken 40
        -:   85:    {
       29:   86:      board[i][column] = turn;
call    0 returned 29
call    1 returned 29
       29:   87:      Piece temp = turn;
       29:   88:      toggleTurn();
call    0 returned 29
       29:   89:      return temp;
        -:   90:    }
        -:   91:  }
        4:   92:  toggleTurn();
call    0 returned 4
        4:   93:  return Blank;
        -:   94:}
        -:   95:
        -:   96:/**
        -:   97: * Returns what piece is at the provided coordinates, or Blank if there
        -:   98: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   99:**/
function _ZN6Piezas7pieceAtEii called 5 returned 100% blocks executed 100%
        5:  100:Piece Piezas::pieceAt(int row, int column)
        -:  101:{
        5:  102:  if(row > 2 || row < 0 || column > 3 || column < 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 1
branch  2 taken 4 (fallthrough)
branch  3 taken 0
branch  4 taken 4 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 4
        -:  103:  {
        1:  104:    return Invalid;
        -:  105:  }
        4:  106:  else return board[row][column];
call    0 returned 4
call    1 returned 4
        -:  107:}
        -:  108:
        -:  109:/**
        -:  110: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  111: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  112: * For a game to be over, all locations on the board must be filled with X's
        -:  113: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  114: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  115: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  116: * line, it is a tie.
        -:  117:**/
function _ZN6Piezas9gameStateEv called 3 returned 100% blocks executed 98%
        3:  118:Piece Piezas::gameState()
        -:  119:{
        3:  120:  bool board_full = true;
       12:  121:  for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        -:  122:  {
       45:  123:    for(int j=0; j<BOARD_COLS;j++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:  124:    {
       36:  125:      if(board[i][j] == Blank)
call    0 returned 36
call    1 returned 36
branch  2 taken 10 (fallthrough)
branch  3 taken 26
        -:  126:      {
       10:  127:        board_full = false;
        -:  128:      }
        -:  129:    }
        -:  130:  }
        3:  131:  if(board_full == false)
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:  132:  {
        1:  133:    return Invalid;
        -:  134:  }
        -:  135:
        2:  136:  int X_count = 0;
        2:  137:  int max_X = 0;
        2:  138:  int O_count = 0;
        2:  139:  int max_O = 0;
        -:  140:
        8:  141:  for(int i=0; i<BOARD_ROWS; i++)
branch  0 taken 6
branch  1 taken 2 (fallthrough)
        -:  142:  {
       30:  143:    for(int j=0; j<BOARD_COLS;j++)
branch  0 taken 24
branch  1 taken 6 (fallthrough)
        -:  144:    {
       24:  145:      if(board[i][j] == X)
call    0 returned 24
call    1 returned 24
branch  2 taken 14 (fallthrough)
branch  3 taken 10
        -:  146:      {
       14:  147:        X_count++;
       14:  148:        if(X_count > max_X)
branch  0 taken 5 (fallthrough)
branch  1 taken 9
        -:  149:        {
        5:  150:          max_X = X_count;
        -:  151:        }
       14:  152:        O_count = 0;
        -:  153:      }
       10:  154:      else if(board[i][j] == O)
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0
        -:  155:      {
       10:  156:        O_count++;
       10:  157:        if(O_count > max_O)
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        -:  158:        {
        2:  159:          max_O = O_count;
        -:  160:        }
       10:  161:        X_count = 0;
        -:  162:      }
        -:  163:    }
        -:  164:  }
        -:  165: 
        2:  166:  O_count = 0;
        2:  167:  X_count = 0;
        -:  168://  max_O = 0;
        -:  169://  max_X = 0;
        -:  170:
       10:  171:  for(int i=0; i<BOARD_COLS; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:  172:  {
       32:  173:    for(int j=0; j<BOARD_ROWS;j++)
branch  0 taken 24
branch  1 taken 8 (fallthrough)
        -:  174:    {
       24:  175:      if(board[j][i] == X)
call    0 returned 24
call    1 returned 24
branch  2 taken 14 (fallthrough)
branch  3 taken 10
        -:  176:      {
       14:  177:        X_count++;
       14:  178:        if(X_count > max_X)
branch  0 taken 2 (fallthrough)
branch  1 taken 12
        -:  179:        {
        2:  180:          max_X = X_count;
        -:  181:        }
       14:  182:        O_count = 0;
        -:  183:      }
       10:  184:      else if(board[j][i] == O)
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0
        -:  185:      {
       10:  186:        O_count++;
       10:  187:        if(O_count > max_O)
branch  0 taken 3 (fallthrough)
branch  1 taken 7
        -:  188:        {
        3:  189:          max_O = O_count;
        -:  190:        }
       10:  191:        X_count = 0;
        -:  192:      }
        -:  193:    }
        -:  194:  }
        -:  195:
        2:  196:  if(max_X > max_O)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  197:  {
        1:  198:    return X;
        -:  199:  }
        -:  200:
        1:  201:  else if(max_O > max_X)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  202:  {
    #####:  203:    return O;
        -:  204:  }
        -:  205:
        1:  206:  return Blank;
        -:  207:}
